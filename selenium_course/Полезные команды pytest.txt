py.test test_sample.py --collect-only   # собирает информацию о наборе тестов

py.test test_sample.py -v   # выводит подробные сообщения

py.test -q test_sample.py   # пропустить вывод имени файла

python -m pytest -q test_sample.py   # вызов pytest через python

py.test --markers   # показать доступные маркеры

# Для того, чтобы создать многоразовый маркер.
/ *
# содержимое pytest.ini
[тест]
маркеры =
    веб-тест: пометить тест как веб-тест.
* /

py.test -k " TestClass, а не test_one "   # запускать только тесты с именами, соответствующими "строковому выражению"

py.test test_server.py::TestClass::test_method   # запускаем тесты, соответствующие идентификатору узла

py.test -x   # остановить после первого сбоя

py.test --maxfail=2   # остановить после двух сбоев

py.test --showlocals   # показать локальные переменные в трассировках
py.test -l   # (ярлык)

py.test --tb=long   # информативное форматирование трассировки по умолчанию
py.test --tb=native   # форматирование стандартной библиотеки Python
py.test --tb=short   # более короткий формат трассировки
py.test --tb=line   # только одна строка на каждый сбой
py.test --tb=no   # без вывода трассировки

py.test -x --pdb # перейти в PDB при первом сбое, затем завершить тестовую сессию

py.test --durations=10   # список 10 самых медленных тестов.

py.test --maxfail=2 -rf   # выйти после 2 сбоев, сообщить информацию о сбое.

py.test -n 4   # отправить тесты на несколько процессоров

py.test -m slowest   # запустить тесты с декоратором @pytest.mark.slowest или slowest = pytest.mark.slowest; @самый медленный

py.test --traceconfig   # узнать, какие плагины py.test активны в вашей среде.

py.test --instafail   # если установлен pytest-instafail, показывать ошибки и сбои сразу, а не ждать окончания набора тестов.

# Проверка с помощью параметризации
/ *
    импортировать pytest


    @pytest.mark.parametrize(
        ( ' n ' , ' ожидаемый ' ), [
            (1, 2),
            (2, 3),
            (3, 4),
            (4, 5),
            pytest.mark.xfail (( 1 ,  0 )) ,
            pytest.mark.xfail (причина = « какая-то ошибка » ) (( 1 ,  0 )) ,
            pytest.mark.skipif( ' sys.version_info >= (3,0) ' ) (( 10 ,  11 )) ,
        ]
    )
    def test_increment (n, ожидается):
        утверждать n + 1 == ожидается
* /